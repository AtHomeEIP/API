schema {
    query: Query
    mutation: Mutation
}

# Mutations are queries that can add, update or delete information held by the api.
type Mutation {
    # Creates a new module to be linked to the WoodBox.
    newModule(module: ModuleInput!): Module

    # Delete a module previously linked to the WoodBox by his ID.
    deleteModule(id: String!): String!

    # Allows the modification of a module previously linked to the WoodBox
    updateModule(id: String!, name: String, location: String, firmware: String, thresholds: [ThresholdInput!] ):Module

    # Allows the insertion of a new environmental measure harvested by a module into
    # the API's database. See also the Sample data class
    newSample(sample: SampleInput!): Sample!

    # Allow the modification or the creation of a new threshold for the module.
    # See also the Threshold data class.
    newThresholds(thresholds: [ThresholdInput!]!): [Threshold]
}

# Queries are operations typically used to only fetch data from the API
type Query {
    # returns all the modules as an array
    allModules: [Module]
}

extend type Query{
    # Used to retrieve a module's data by its unique identifier.
    getModuleById(id: String!): Module
}

# Data class used to create a new module from the API.
# See the Module data class for more information.
input ModuleInput{
    boxId: String!
    mac: String!
    name: String!
    location: String!
    type: String!
    vendor: String!
    #threshold: [ThresholdInput!]!
    firmware: String!
}

type Module {

    # The unique identifier of the module
    id: ID!

    # Mac address of the module
    # Under the format xx:xx:xx:xx:xx:xx
    # Where x represent an hexadecimal digit
    mac: String!

    # The name of the module
    # Either the default one or
    # one choosen by the user
    name: String!

    # The room where the module is located
    location: String!

    # The type of module, returned as a lower case String
    # As of now, can be either:
    # - hygrometer
    # - thermometer
    # - luxmeter
    # - athmospherics
    type: String!

    # The vendor of the module
    # "woodbox"
    vendor: String!

    # environmental samples gathered by the module.
    # (see the Sample type)
    # returned as an array
    samples: [Sample]!

    # Thresholds of a module
    thresholds: [Threshold]
}

# Data class used to insert samples via the API
# See the "Sample" data class for more information.
input SampleInput{
    moduleId: Int!
    payload: String!
    date: String!
}

# Data class representing the data and metadata of a measure
# harvested by a module of the WoodBox.
type Sample {

    # The id of the module that gathered the environmental sample
    moduleId: Int

    # The data and metadata  of the samples sent by the module
    payload: String!

    # The date & time the sample was harvested at.
    # Formatted as such: "YYYY-MM-DD hh:mm:ss.Âµs"
    # For example: 2018-01-02 12:56:13.327164
    date: String!
}

#Data class used to change Threshold of a module
# See the "Threshold" data class for more information.
input ThresholdInput {
    # The id of the module that need the threshold to visualize it samples.
    moduleId: Int!
    name: String!
    default: Int!
    min: Int!
    max: Int!
    current: Int!
}
# Data class representing the data of a threshold
type Threshold {
    # Name of the threshold
    # "Maximum"
    name: String!
    # The default value of the threshold
    default: Int
    # The Minimum value of the threshold
    min: Int
    # The Maximum value of the threshold
    max: Int
    # The current value of the threshold
    current: Int
}
